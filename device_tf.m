function fig_hdl = device_tf
% DEVICE_TF
%-------------------------------------------------------------------------------
% File name   : device_tf.m             
% Generated on: 17-May-2015 00:36:37          
% Description :
% Important: this file is a part of a main_device.m file
% 
% SINTAXE: >> device_tf
%
% If the user click on "Tranfer function 2nd" a new window is open and
% shows the step response of a second-order dynamic system of fixed 
% natural frequency. The GUI includes a zero-poles-gain values as well 
% as pole-zero plot of dynamic system. 
%
% Set the initial values of dynamic system of second order to create the 
% system model.
%
%
% Author: Matilde Pos-de-Mina Pato
% Date: May, 13 2015
% version: 1
% email: mpato@deetc.isel.pt
%
% BUGS and SUGGESTIONS: please submit the issue to the above email.
%-------------------------------------------------------------------------------


% Initialize handles structure
handles = struct();

% Create all UI controls
build_gui();

% Assign function output
fig_hdl = handles.device_tf;

%% ---------------------------------------------------------------------------
	function build_gui()
% Creation of all uicontrols

		% --- FIGURE -------------------------------------
		handles.device_tf = figure( ...
			'Tag', 'device_tf', ...
			'Units', 'characters', ...
			'Position', [63 23.5833333333333 124.333333333333 44.1666666666667], ...
			'Name', 'DEvICe - TF', ...
			'MenuBar', 'none', ...
			'NumberTitle', 'off', ...
			'Color', [1 1 1], ...
			'Resize', 'on');

		% --- PANELS -------------------------------------
		handles.uipanel3 = uipanel( ...
			'Parent', handles.device_tf, ...
			'Tag', 'uipanel3', ...
			'Units', 'normalized', ...
			'Position', [0.0246238030095759 0.0916666666666667 0.426812585499316 0.802083333333333], ...
			'FontAngle', 'italic', ...
			'FontName', 'Helvetica', ...
			'FontSize', 14, ...
			'FontWeight', 'bold', ...
			'BackgroundColor', [1 1 1], ...
			'Title', 'Input', ...
			'ShadowColor', [0 0 0]);

		handles.uipanel5 = uipanel( ...
			'Parent', handles.uipanel3, ...
			'Tag', 'uipanel5', ...
			'UserData', zeros(1,0), ...
			'Units', 'normalized', ...
			'Position', [0.0253968253968254 0.227941176470588 0.942857142857143 0.183823529411765], ...
			'FontName', 'Helvetica', ...
			'FontSize', 12, ...
			'FontWeight', 'bold', ...
			'BackgroundColor', [1 1 1], ...
			'Title', 'Response', ...
			'ShadowColor', [0 0 0]);

		handles.uipanel6 = uipanel( ...
			'Parent', handles.device_tf, ...
			'Tag', 'uipanel6', ...
			'Units', 'normalized', ...
			'Position', [0.477428180574555 0.0916666666666667 0.515731874145007 0.802083333333333], ...
			'FontAngle', 'italic', ...
			'FontName', 'Helvetica', ...
			'FontSize', 14, ...
			'FontWeight', 'bold', ...
			'BackgroundColor', [1 1 1], ...
			'Title', 'Results', ...
			'ShadowColor', [0 0 0]);

		handles.uipanel2 = uipanel( ...
			'Parent', handles.device_tf, ...
			'Tag', 'uipanel2', ...
			'Units', 'normalized', ...
			'Position', [0.0361930294906166 0.422641509433962 0.400804289544236 0.284905660377358], ...
			'FontName', 'Helvetica', ...
			'FontSize', 12, ...
			'FontWeight', 'bold', ...
			'BackgroundColor', [1 1 1], ...
			'Title', 'Transfer function', ...
			'ShadowColor', [0 0 0]);

		% --- AXES -------------------------------------
		handles.axes2 = axes( ...
			'Parent', handles.uipanel3, ...
			'Tag', 'axes2', ...
			'Visible', 'off', ...
			'Units', 'normalized', ...
			'Position', [0.0253968253968254 0.823529411764706 0.93968253968254 0.156862745098039]);

		handles.axes3 = axes( ...
			'Parent', handles.uipanel6, ...
			'Tag', 'axes3', ...
			'Visible', 'off', ...
			'Units', 'normalized', ...
			'Position', [0.101604278074866 0.100502512562814 0.879679144385027 0.575376884422111]);

		handles.axes1 = axes( ...
			'Parent', handles.device_tf, ...
			'Tag', 'axes1', ...
			'Visible', 'off', ...
			'Units', 'normalized', ...
			'Position', [0.521145975443383 0.177949709864603 0.458390177353342 0.646034816247582]);

		% --- STATIC TEXTS -------------------------------------
		handles.text1 = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'text1', ...
			'Style', 'text', ...
			'Units', 'pixels', ...
			'Position', [10 137 102 13], ...
			'FontName', 'Helvetica', ...
			'FontSize', 12, ...
			'FontWeight', 'bold', ...
			'BackgroundColor', [1 1 1], ...
			'String', 'Transfer function');

		handles.text2 = uicontrol( ...
			'Parent', handles.uipanel3, ...
			'Tag', 'text2', ...
			'Style', 'text', ...
			'Units', 'pixels', ...
			'Position', [10 409 40 15], ...
			'FontAngle', 'italic', ...
			'FontName', 'Helvetica', ...
			'FontSize', 14, ...
			'FontWeight', 'bold', ...
			'BackgroundColor', [1 1 1], ...
			'String', 'Input');

		handles.text3 = uicontrol( ...
			'Parent', handles.uipanel5, ...
			'Tag', 'text3', ...
			'Style', 'text', ...
			'Units', 'pixels', ...
			'Position', [10 61 62 13], ...
			'FontName', 'Helvetica', ...
			'FontSize', 12, ...
			'FontWeight', 'bold', ...
			'BackgroundColor', [1 1 1], ...
			'String', 'Response');

		handles.text4 = uicontrol( ...
			'Parent', handles.uipanel6, ...
			'Tag', 'text4', ...
			'Style', 'text', ...
			'Units', 'pixels', ...
			'Position', [10 409 56 15], ...
			'FontAngle', 'italic', ...
			'FontName', 'Helvetica', ...
			'FontSize', 14, ...
			'FontWeight', 'bold', ...
			'BackgroundColor', [1 1 1], ...
			'String', 'Results');

		handles.text14 = uicontrol( ...
			'Parent', handles.uipanel6, ...
			'Tag', 'text14', ...
			'Visible', 'off', ...
			'Style', 'text', ...
			'Units', 'normalized', ...
			'Position', [0.0347593582887701 0.71356783919598 0.951871657754011 0.246231155778894], ...
			'FontName', 'Helvetica', ...
			'FontSize', 12, ...
			'BackgroundColor', [1 1 1], ...
			'String', {'Static Text'}, ...
			'HorizontalAlignment', 'left');

		handles.text16 = uicontrol( ...
			'Parent', handles.uipanel6, ...
			'Tag', 'text16', ...
			'Visible', 'off', ...
			'Style', 'text', ...
			'Units', 'normalized', ...
			'Position', [0.0341207349081365 0.0441176470588235 0.94750656167979 0.884803921568627], ...
			'FontName', 'Helvetica', ...
			'FontSize', 12, ...
			'BackgroundColor', [1 1 1], ...
			'String', {'Static Text'}, ...
			'HorizontalAlignment', 'left');

		handles.text1 = uicontrol( ...
			'Parent', handles.device_tf, ...
			'Tag', 'text1', ...
			'Style', 'text', ...
			'Units', 'normalized', ...
			'Position', [0.232558139534884 0.897916666666664 0.488372093023256 0.0854166666666666], ...
			'FontAngle', 'italic', ...
			'FontName', 'Times', ...
			'FontSize', 19.9999999999994, ...
			'FontWeight', 'bold', ...
			'ForegroundColor', [0.0706 0.212 0.141], ...
			'BackgroundColor', [1 1 1], ...
			'String', 'DEvICe - Transfer Function');

		handles.text3 = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'text3', ...
			'Style', 'text', ...
			'Units', 'normalized', ...
			'Position', [0.0677966101694915 0.661764705882353 0.179661016949153 0.125], ...
			'FontName', 'Helvetica', ...
			'FontSize', 11, ...
			'BackgroundColor', [1 1 1], ...
			'String', 'K - gain');

		handles.text4 = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'text4', ...
			'Style', 'text', ...
			'Units', 'normalized', ...
			'Position', [0.264406779661017 0.661764705882353 0.325423728813559 0.125], ...
			'FontName', 'Helvetica', ...
			'FontSize', 11, ...
			'BackgroundColor', [1 1 1], ...
			'String', 'tau - time constant');

		handles.text5 = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'text5', ...
			'Style', 'text', ...
			'Units', 'normalized', ...
			'Position', [0.603389830508475 0.661764705882353 0.376271186440678 0.125], ...
			'FontName', 'Helvetica', ...
			'FontSize', 11, ...
			'BackgroundColor', [1 1 1], ...
			'String', 'zeta - damping factor');

		handles.text6 = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'text6', ...
			'Style', 'text', ...
			'Units', 'normalized', ...
			'Position', [0.023728813559322 0.330882352941176 0.352542372881356 0.125], ...
			'FontName', 'Helvetica', ...
			'FontSize', 12, ...
			'FontWeight', 'demi', ...
			'BackgroundColor', [1 1 1], ...
			'String', 'Initial conditions', ...
			'HorizontalAlignment', 'left');

		handles.text7 = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'text7', ...
			'Style', 'text', ...
			'Units', 'normalized', ...
			'Position', [0.345762711864407 0.198529411764706 0.179661016949153 0.125], ...
			'FontName', 'Helvetica', ...
			'FontSize', 11, ...
			'BackgroundColor', [1 1 1], ...
			'String', 'y'' (0)');

		handles.text8 = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'text8', ...
			'Style', 'text', ...
			'Units', 'normalized', ...
			'Position', [0.0677966101694915 0.205882352941176 0.179661016949153 0.125], ...
			'FontName', 'Helvetica', ...
			'FontSize', 11, ...
			'BackgroundColor', [1 1 1], ...
			'String', 'y(0)');

		handles.text18 = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'text18', ...
			'Style', 'text', ...
			'Units', 'normalized', ...
			'Position', [0.023728813559322 0.838235294117647 0.352542372881356 0.110294117647059], ...
			'FontName', 'Helvetica', ...
			'FontSize', 12, ...
			'FontWeight', 'demi', ...
			'BackgroundColor', [1 1 1], ...
			'String', 'Coefficients', ...
			'HorizontalAlignment', 'left');

		handles.text17 = uicontrol( ...
			'Parent', handles.device_tf, ...
			'Tag', 'text17', ...
			'Style', 'text', ...
			'Units', 'characters', ...
			'Position', [97.5 1.5 25.1666666666667 2.16666666666667], ...
			'FontName', 'Helvetica', ...
			'FontSize', 9.99999999999967, ...
			'FontWeight', 'bold', ...
			'ForegroundColor', [0.0706 0.212 0.141], ...
			'BackgroundColor', [1 1 1], ...
			'String', {'created by Matilde Pato  ','version 1 * May 2015  '}, ...
			'HorizontalAlignment', 'right');

		% --- PUSHBUTTONS -------------------------------------
		handles.pushbutton_plot = uicontrol( ...
			'Parent', handles.uipanel3, ...
			'Tag', 'pushbutton_plot', ...
			'Style', 'pushbutton', ...
			'Units', 'normalized', ...
			'Position', [0.0317460317460317 0.125 0.326984126984127 0.0955882352941176], ...
			'FontName', 'Helvetica', ...
			'FontSize', 12, ...
			'String', 'Plot', ...
			'Callback', @pushbutton_plot_Callback);

		handles.pushbutton_zeros = uicontrol( ...
			'Parent', handles.uipanel3, ...
			'Tag', 'pushbutton_zeros', ...
			'Style', 'pushbutton', ...
			'Units', 'normalized', ...
			'Position', [0.39047619047619 0.125 0.326984126984127 0.0955882352941176], ...
			'FontName', 'Helvetica', ...
			'FontSize', 12, ...
			'String', 'Get zeros-poles', ...
			'Callback', @pushbutton_zeros_Callback);

		handles.pushbutton_characteristics = uicontrol( ...
			'Parent', handles.uipanel3, ...
			'Tag', 'pushbutton_characteristics', ...
			'Style', 'pushbutton', ...
			'Units', 'normalized', ...
			'Position', [0.0317460317460317 0.0147058823529412 0.326984126984127 0.0955882352941176], ...
			'FontName', 'Helvetica', ...
			'FontSize', 12, ...
			'String', 'Get characteristics', ...
			'Callback', @pushbutton_characteristics_Callback);

		handles.pushbutton_save = uicontrol( ...
			'Parent', handles.uipanel3, ...
			'Tag', 'pushbutton_save', ...
			'Style', 'pushbutton', ...
			'Units', 'normalized', ...
			'Position', [0.39047619047619 0.0147058823529412 0.326984126984127 0.0955882352941176], ...
			'FontName', 'Helvetica', ...
			'FontSize', 12, ...
			'String', 'Save Plot', ...
			'Enable', 'off', ...
			'Callback', @pushbutton_save_Callback);

		handles.pushbutton_reset = uicontrol( ...
			'Parent', handles.device_tf, ...
			'Tag', 'pushbutton_reset', ...
			'Style', 'pushbutton', ...
			'Units', 'normalized', ...
			'Position', [0.477211796246649 0.0132075471698113 0.138069705093834 0.0735849056603774], ...
			'FontName', 'Helvetica', ...
			'FontSize', 12, ...
			'String', 'Reset', ...
			'Callback', @pushbutton_reset_Callback);

		handles.pushbutton_back = uicontrol( ...
			'Parent', handles.device_tf, ...
			'Tag', 'pushbutton_back', ...
			'Style', 'pushbutton', ...
			'Units', 'normalized', ...
			'Position', [0.628686327077748 0.0132075471698113 0.138069705093834 0.0735849056603774], ...
			'FontName', 'Helvetica', ...
			'FontSize', 12, ...
			'String', 'Back', ...
			'Callback', @pushbutton_back_Callback);

		% --- CHECKBOXES -------------------------------------
		handles.checkbox_ramp = uicontrol( ...
			'Parent', handles.uipanel5, ...
			'Tag', 'checkbox_ramp', ...
			'Style', 'checkbox', ...
			'Units', 'normalized', ...
			'Position', [0.0608108108108108 0.183333333333333 0.27027027027027 0.233333333333333], ...
			'FontName', 'Helvetica', ...
			'FontSize', 12, ...
			'BackgroundColor', [1 1 1], ...
			'String', 'Ramp', ...
			'Callback', @checkbox_ramp_Callback);

		handles.checkbox_impulse = uicontrol( ...
			'Parent', handles.uipanel5, ...
			'Tag', 'checkbox_impulse', ...
			'Style', 'checkbox', ...
			'Units', 'normalized', ...
			'Position', [0.554054054054054 0.633333333333333 0.310810810810811 0.233333333333333], ...
			'FontName', 'Helvetica', ...
			'FontSize', 12, ...
			'BackgroundColor', [1 1 1], ...
			'String', 'Impulse', ...
			'Callback', @checkbox_impulse_Callback);

		handles.checkbox_sinusoidal = uicontrol( ...
			'Parent', handles.uipanel5, ...
			'Tag', 'checkbox_sinusoidal', ...
			'Style', 'checkbox', ...
			'Units', 'normalized', ...
			'Position', [0.554054054054054 0.183333333333333 0.33445945945946 0.233333333333333], ...
			'FontName', 'Helvetica', ...
			'FontSize', 12, ...
			'BackgroundColor', [1 1 1], ...
			'String', 'Sinusoidal', ...
			'Callback', @checkbox_sinusoidal_Callback);

		handles.checkbox_step = uicontrol( ...
			'Parent', handles.uipanel5, ...
			'Tag', 'checkbox_step', ...
			'Style', 'checkbox', ...
			'Units', 'normalized', ...
			'Position', [0.0608108108108108 0.633333333333333 0.239864864864865 0.233333333333333], ...
			'FontName', 'Helvetica', ...
			'FontSize', 12, ...
			'BackgroundColor', [1 1 1], ...
			'String', 'Step', ...
			'Callback', @checkbox_step_Callback);

		% --- EDIT TEXTS -------------------------------------
		handles.edit_K = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'edit_K', ...
			'Style', 'edit', ...
			'Units', 'normalized', ...
			'Position', [0.0406779661016949 0.5 0.233898305084746 0.147058823529412], ...
			'FontName', 'Helvetica', ...
			'FontSize', 9.99999999999967, ...
			'BackgroundColor', [1 1 1], ...
			'String', '1.0', ...
			'Callback', @edit_K_Callback, ...
			'CreateFcn', @edit_K_CreateFcn);

		handles.edit_tau = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'edit_tau', ...
			'Style', 'edit', ...
			'Units', 'normalized', ...
			'Position', [0.311864406779661 0.5 0.233898305084746 0.147058823529412], ...
			'FontName', 'Helvetica', ...
			'FontSize', 9.99999999999967, ...
			'BackgroundColor', [1 1 1], ...
			'String', '1.0', ...
			'Callback', @edit_tau_Callback, ...
			'CreateFcn', @edit_tau_CreateFcn);

		handles.edit_zeta = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'edit_zeta', ...
			'Style', 'edit', ...
			'Units', 'normalized', ...
			'Position', [0.674576271186441 0.5 0.233898305084746 0.147058823529412], ...
			'FontName', 'Helvetica', ...
			'FontSize', 9.99999999999967, ...
			'BackgroundColor', [1 1 1], ...
			'String', '1.0', ...
			'Callback', @edit_zeta_Callback, ...
			'CreateFcn', @edit_zeta_CreateFcn);

		handles.edit_y0 = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'edit_y0', ...
			'Style', 'edit', ...
			'Units', 'normalized', ...
			'Position', [0.0406779661016949 0.0588235294117647 0.233898305084746 0.147058823529412], ...
			'FontName', 'Helvetica', ...
			'FontSize', 9.99999999999967, ...
			'BackgroundColor', [1 1 1], ...
			'String', '0', ...
			'Callback', @edit_y0_Callback, ...
			'CreateFcn', @edit_y0_CreateFcn);

		handles.edit_dy0 = uicontrol( ...
			'Parent', handles.uipanel2, ...
			'Tag', 'edit_dy0', ...
			'Style', 'edit', ...
			'Units', 'normalized', ...
			'Position', [0.31864406779661 0.0588235294117647 0.233898305084746 0.147058823529412], ...
			'FontName', 'Helvetica', ...
			'FontSize', 9.99999999999967, ...
			'BackgroundColor', [1 1 1], ...
			'String', '1.0', ...
			'Callback', @edit_dy0_Callback, ...
			'CreateFcn', @edit_dy0_CreateFcn);


    end
     % Create the data of the background
        % Assign gui, plot, reset, coefficents parameters, initial conditions and
        % period time to integration handles to the base workspace
        assignin('base','device_tf_handles',handles);

        assignin('base','plot_hObject',handles.pushbutton_plot);
        assignin('base','zeros_hObject',handles.pushbutton_zeros);
        assignin('base','reset_hObject',handles.pushbutton_reset);
        assignin('base','back_hObject',handles.pushbutton_back);

        set(handles.pushbutton_save,'enable','off');

        assignin('base','K_hObject',handles.edit_K);
        assignin('base','tau_hObject',handles.edit_tau);
        assignin('base','zeta_hObject',handles.edit_zeta);

        assignin('base','y0_hObject',handles.edit_y0);
        assignin('base','dy0_hObject',handles.edit_dy0);

        axes(handles.axes2);
        im=imread('TF.png');
        bigim = imresize(im,20);
        image(bigim);
        axis image; axis off,


        set(handles.checkbox_step,'Value',0);
        set(handles.checkbox_ramp,'Value',0);
        set(handles.checkbox_impulse,'Value',0);
        set(handles.checkbox_sinusoidal,'Value',0);

         handles.step = 0;
         handles.ramp = 0;
         handles.impulse = 0;
         handles.sinusoidal = 0; 

        % Delete static text   
            set(handles.text14,'visible','off');
            set(handles.text16,'visible','off');

        % Delete plot 
            cla(handles.axes1); % Make averSpec the current axes.
            set(handles.axes1,'visible','off');
            legend(handles.axes1,'clear');

            cla(handles.axes3); % Make averSpec the current axes.
            set(handles.axes3,'visible','off');
            legend(handles.axes3,'clear');

        % Disable all warning messages from command window
        warning off; %#ok<*WNOFF>

%% ---------------------------------------------------------------------------
	function pushbutton_plot_Callback(hObject,evendata) %#ok<INUSD>

             handles.step = get(handles.checkbox_step,'Value');
        handles.ramp = get(handles.checkbox_ramp,'Value');
        handles.impulse = get(handles.checkbox_impulse,'Value');
        handles.sinusoidal = get(handles.checkbox_sinusoidal,'Value');

        % Delete static text   
            set(handles.text14,'visible','off');
            set(handles.text16,'visible','off');

        %  Delete zpkmap plot in proper axes
            cla(handles.axes3); % Make averSpec the current axes.
            set(handles.axes3,'visible','off');
            legend(handles.axes3,'clear');   

        % Validate that the text in the coefficients parameters K, tau, zeta
        % field converts to a real number

            K = str2num(get(handles.edit_K, 'String'));
            tau = str2num(get(handles.edit_tau, 'String'));
            zeta = str2num(get(handles.edit_zeta, 'String'));

         % Validate that the text in the initial conditions y0 and dy0
         % field converts to a real number

            y0 = str2num(get(handles.edit_y0, 'String'));
            dy0 = str2num(get(handles.edit_dy0, 'String'));

         % Get transfer function
         s=tf('s');
         Gs = transffcn(K,tau,zeta,y0,dy0); 

         % Different response: step, ramp, impulse and sinusoidal
         if zeta == 0 
            [fcn1, t1] = step(Gs,10);
            [fcn3, t3] = impulse(Gs,10);
         else
            [fcn1, t1] = step(Gs);
            [fcn3, t3] = impulse(Gs);
         end
         [fcn2, t2] = step(Gs/s);   % ramp

              [u,t] = gensig('sin',tau,round(max(t1))); % // Define time samples for the simulation
         [fcn4, t4] = lsim(Gs,u,t);

         % create matrix with values of different responses
         rsize=[length(fcn1); length(fcn2); length(fcn3); length(fcn4)]; % row lengths
         minsize = min(rsize);

            M = cell(4,1);
            M{1} = fcn1; M{2} = fcn2(1:abs(round(minsize/4))); M{3} = fcn3; M{4} = fcn4;
            T = cell(4,1); 
            T{1} = t1; T{2} = t2(1:abs(round(minsize/4))); T{3} = t3; T{4} = t4;

         handles.fcn = M;
         handles.tvalues = T;

         %// Get selected checkbox:

        GetCheckboxes = [handles.step handles.ramp handles.impulse ...
            handles.sinusoidal];

            if sum(GetCheckboxes) == 0
                uiwait(msgbox('Choose at least one response!','Erro','error'));
            else
                set(handles.pushbutton_save,'enable','on');
            end


        %// Create strings for legend and title for each data set.
        handles.LegendStrings = {'Step'; 'Ramp'; 'Impulse'; 'Sinusoidal'};

        handles.ColorArray = {'--b'; 'r';'-k'; '--g'};
        axes(handles.axes1);

        for k = 1:numel(GetCheckboxes) %// If checkbox is checked, plot the data.

            if GetCheckboxes(k)

                plot(handles.tvalues{k,1},handles.fcn{k,1},...
                    handles.ColorArray{k});
                hold on
            end  

        end
        hold off

        %// Fetch the right legend to add. Use transpose and colon operator
        %to get vertical array.figure

        TextLegend = (handles.LegendStrings(GetCheckboxes ==1,:))';
        legend(TextLegend(:),'location','best','FontSize',12);
        legend boxoff

        % Reset handles.response
        handles.step = 0;
        handles.ramp = 0;
        handles.impulse = 0;
        handles.sinusoidal = 0;
	end

%% ---------------------------------------------------------------------------
	function pushbutton_zeros_Callback(hObject,evendata) %#ok<INUSD>

        % Uncheckboxes
        set(handles.checkbox_step,'Value',0);
        set(handles.checkbox_ramp,'Value',0);
        set(handles.checkbox_impulse,'Value',0);
        set(handles.checkbox_sinusoidal,'Value',0);

        handles.step = 0;
        handles.ramp = 0;
        handles.impulse = 0;
        handles.sinusoidal = 0;

        set(handles.pushbutton_save,'enable','off');

        % Validate that the text in the coefficients parameters K, tau, zeta
        % field converts to a real number

            K = str2num(get(handles.edit_K, 'String'));
            tau = str2num(get(handles.edit_tau, 'String'));
            zeta = str2num(get(handles.edit_zeta, 'String'));

        % Validate that the text in the initial conditions y0 and dy0
        % field converts to a real number

            y0 = str2num(get(handles.edit_y0, 'String'));
            dy0 = str2num(get(handles.edit_dy0, 'String'));

        % Delete plot 
            cla(handles.axes1,'reset'); % Make averSpec the current axes.
            set(handles.axes1,'visible','off');
            legend(handles.axes1,'clear');

            cla(handles.axes3,'reset'); % Make averSpec the current axes.
            set(handles.axes3,'visible','off');
            legend(handles.axes3,'clear');
            set(handles.text16,'visible','off');

        % Display static text   
            set(handles.text14,'visible','on');

        % Display zpkmap plot in proper axes
             set(handles.axes3,'Visible','on');   

        % Get gain, zeros and poles 
            sys = transffcn(K,tau,zeta,y0,dy0);
           [zerostf, polestf, gaintf] = zpkdata(sys,'v');

           zpkvalue = cell(3,1);
           zpkvalue{1} = zerostf'; zpkvalue{2} = polestf'; zpkvalue{3} = gaintf;

           if isempty(zpkvalue{1}) % is zero?
               zpkvalue{1} = 0;
           end

           LegendZPK = cell(3,1);
           LegendZPK{1} = 'Zeros = '; LegendZPK{2} = 'Poles = '; ...
               LegendZPK{3}= 'Gain = ';

           arraydata = cell(3,1);

           for i=1:3
               arraydata{i}=[LegendZPK{i} num2str(zpkvalue{i})];
           end

           arraydata = ['The transfer function has '; ' '; arraydata];
           set(handles.text14,'String',arraydata,'FontSize',13);

        % Plot zpkdata
            axes(handles.axes3); sgrid
            pzmap(sys);
            grid on
            legend boxoff        % Hides the legend's axes (legend border and background)

	end

%% ---------------------------------------------------------------------------
	function pushbutton_characteristics_Callback(hObject,evendata) %#ok<INUSD>

        handles.step = get(handles.checkbox_step,'Value');
        handles.ramp = get(handles.checkbox_ramp,'Value');
        handles.impulse = get(handles.checkbox_impulse,'Value');
        handles.sinusoidal = get(handles.checkbox_sinusoidal,'Value');

        % pushbutton_save not visible 
        set(handles.pushbutton_save,'enable','off');

        % Delete plots 
            cla(handles.axes1,'reset'); % Make averSpec the current axes.
            set(handles.axes1,'visible','off');
            legend(handles.axes1,'clear');

            cla(handles.axes3,'reset'); % Make averSpec the current axes.
            set(handles.axes3,'visible','off');
            legend(handles.axes3,'clear'); 

            set(handles.text14,'visible','off');

        % Validate that the text in the coefficients parameters K, tau, zeta
        % field converts to a real number

            K = str2num(get(handles.edit_K, 'String'));
            tau = str2num(get(handles.edit_tau, 'String'));
            zeta = str2num(get(handles.edit_zeta, 'String'));

         % Validate that the text in the initial conditions y0 and dy0
         % field converts to a real number

            y0 = str2num(get(handles.edit_y0, 'String'));
            dy0 = str2num(get(handles.edit_dy0, 'String'));

         % Get transfer function
         s=tf('s');
         Gs = transffcn(K,tau,zeta,y0,dy0); 

         % Different response: step, ramp, impulse and sinusoidal
         [fcn1, t1] = step(Gs);
         [fcn2, t2] = step(Gs/s); 
         [fcn3, t3] = impulse(Gs);
              [u,t] = gensig('sin',tau,round(max(t1))); % // Define time samples for the simulation
         [fcn4, t4] = lsim(Gs,u,t);


        % Rise time, settling time, and other step response characteristics
            stinfo = stepinfo(fcn1,t1);
            stinfo = struct2cell(stinfo);

            rpinfo = stepinfo(fcn2,t2);
            rpinfo = struct2cell(rpinfo);

            stfield = cell(length(stinfo),1);
            stfield{1} = 'Rise Time: ';
            stfield{2} = 'Settling time: ';
            stfield{3} = 'Settling min: ';
            stfield{4} = 'Settling max: ';
            stfield{5} = 'Overshoot: ';
            stfield{6} = 'Undershoot: ';
            stfield{7} = 'Peak: ';
            stfield{8} = 'Peak time: ';

            for i=1:length(stinfo)
                starrayinfo{i} = [stfield{i} num2str(stinfo{i})]; %#ok<*AGROW>
                rparrayinfo{i} = [stfield{i} num2str(rpinfo{i})];
            end

        % Compute linear response characteristics: impulse and sinusoidal
            impinfo = lsiminfo(fcn3,t3); % impulse
            impinfo = struct2cell(impinfo);

            sininfo = lsiminfo(fcn4,t4); % sinusoidal
            sininfo = struct2cell(sininfo);

            impfield = cell(length(impinfo),1);
            impfield{1} = 'Settling time: ';
            impfield{2} = 'Min: ';
            impfield{3} = 'Min time: ';
            impfield{4} = 'Max: ';
            impfield{5} = 'Max time: ';

            for i=1:length(impinfo)
                imparrayinfo{i} = [impfield{i} num2str(impinfo{i})]; % impulse
                sinarrayinfo{i} = [impfield{i} num2str(sininfo{i})]; % sinusoidal
            end

        % Create Handle:
        % Handle objects enable more than one variable to refer to the same information    
            handles.response{1,1} = starrayinfo';  % step
            handles.response{2,1} = rparrayinfo';  % ramp 
            handles.response{3,1} = imparrayinfo'; % impulse
            handles.response{4,1} = sinarrayinfo'; % sinusoidal


            %// Get selected checkbox:

        GetCheckboxes = [handles.step handles.ramp handles.impulse ...
            handles.sinusoidal];

        if sum(GetCheckboxes) ~= 1
            uiwait(msgbox('Choose just one response!','Erro','error'))
        else
            % Display static text   
            set(handles.text16,'visible','on');

            %// Create strings for title for each data set.
            handles.ResponseStrings = {'Step'; 'Ramp'; 'Impulse'; 'Sinusoidal'};
            handles.characteristics{4,1} = [];

            for k = 1:numel(GetCheckboxes) %// If checkbox is checked, plot the data.

                if GetCheckboxes(k)  
                     arraydata{k} = ['The response characteristics of ', ...
                         handles.ResponseStrings{k}; ' '; handles.response{k,1}];
                     handles.characteristics{k,1} = arraydata{k};
                     set(handles.text16,'String',...
                            handles.characteristics{k,1}, 'FontSize',13);
                end     
            end

        end
        % Reset handles.response
        handles.step = 0;
        handles.ramp = 0;
        handles.impulse = 0;
        handles.sinusoidal = 0; 
	end

%% ---------------------------------------------------------------------------
	function pushbutton_save_Callback(hObject,evendata) %#ok<INUSD>

        K = str2num(get(handles.edit_K, 'String'));
        tau = str2num(get(handles.edit_tau, 'String'));
        zeta = str2num(get(handles.edit_zeta, 'String'));

        F=getframe(handles.axes1); %select axes in GUI
        figure(); %new figure
        image(F.cdata); %show selected axes in new figure
        nameoffigure = strcat('resultstf_K=',num2str(K),'tau=',...
            num2str(tau),'zeta=',num2str(zeta));
        saveas(gcf, nameoffigure, 'png'); %save figure
        close(gcf); %and close it 
	end

%% ---------------------------------------------------------------------------
	function pushbutton_reset_Callback(hObject,evendata) %#ok<INUSD>

        valueofcoeff = 1;
        valueofinitial = 0;

        strofcoeff = num2str(valueofcoeff);
        strofinitial = num2str(valueofinitial);

        % Set the value of the coefficients: K, tau and zeta, and initial conditions
        % y0 and dy0 to the new values set in the GUI 
        set(handles.edit_K,'String',strofcoeff);
        set(handles.edit_tau,'String',strofcoeff);
        set(handles.edit_zeta,'String',strofcoeff);
        set(handles.edit_y0,'String',strofinitial);
        set(handles.edit_dy0,'String',strofcoeff);

        % Uncheckboxes
        set(handles.checkbox_step,'Value',0);
        set(handles.checkbox_ramp,'Value',0);
        set(handles.checkbox_impulse,'Value',0);
        set(handles.checkbox_sinusoidal,'Value',0);

        handles.step = 0;
        handles.ramp = 0;
        handles.impulse = 0;
        handles.sinusoidal = 0;

        % pushbutton_save not visible 
        set(handles.pushbutton_save,'enable','off');

        % Delete plot 
            cla(handles.axes1); % Make averSpec the current axes.
            set(handles.axes1,'visible','off');
            legend(handles.axes1,'clear');

            cla(handles.axes3); % Make averSpec the current axes.
            set(handles.axes3,'visible','off');
            legend(handles.axes3,'clear');

        % Delete static text   
            set(handles.text14,'visible','off');
            set(handles.text16,'visible','off');

	end

%% ---------------------------------------------------------------------------
	function pushbutton_back_Callback(hObject,evendata) %#ok<INUSD>

         % return to main
        pushbutton_reset_Callback(hObject,evendata);
        close(device_tf);
        main_device;
	end

%% ---------------------------------------------------------------------------
	function checkbox_ramp_Callback(hObject,evendata) %#ok<INUSD>
    
        handles.ramp = get(hObject,'Value');

        guidata(hObject,handles);
	end

%% ---------------------------------------------------------------------------
	function checkbox_impulse_Callback(hObject,evendata) %#ok<INUSD>

         handles.impulse = get(hObject,'Value');

        guidata(hObject,handles);   
	end

%% ---------------------------------------------------------------------------
	function checkbox_sinusoidal_Callback(hObject,evendata) %#ok<INUSD>

        handles.sinusoidal = get(hObject,'Value');

        guidata(hObject,handles);
	end

%% ---------------------------------------------------------------------------
	function checkbox_step_Callback(hObject,evendata) %#ok<INUSD>

        handles.step = get(hObject,'Value');

        guidata(hObject,handles);
	end

%% ---------------------------------------------------------------------------
	function edit_K_Callback(hObject,evendata) %#ok<INUSD>
    
        %get the user entered value for gain and convert it to a string
        edit_K = get(hObject,'String');
        K = str2num(edit_K);

        if isnan(K) || ~isreal(K)  
            % isdouble returns NaN for non-numbers and K cannot be complex
            % Disable the plot button and change its string to say why
            uiwait(msgbox('Gain`s value is not valid!','Erro','error'));
            % Give the edit text box focus so user can correct the error
            uicontrol(hObject);
        else       
        %    Set the value of the K
            set(handles.edit_K,'Value',K);

        end
	end

%% ---------------------------------------------------------------------------
	function edit_K_CreateFcn(hObject,evendata) %#ok<INUSD>
    
         if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
            set(hObject,'BackgroundColor','white');
        end
        %set the default gain to be 1
        set(hObject,'String','1.0');
        evalin('base','1.0;');

	end

%% ---------------------------------------------------------------------------
	function edit_tau_Callback(hObject,evendata) %#ok<INUSD>

        %get the user entered value for time constant and convert it to a string
        edit_tau = get(hObject,'String');
        tau = str2num(edit_tau);

        if isnan(tau) || ~isreal(tau) || tau <= 0 
        % isdouble returns NaN for non-numbers and tau cannot be complex
        % Disable the plot button and change its string to say why
            uiwait(msgbox('Time constant`s value is not valid! Time must be higher than 0.','Erro','error'));
            % Give the edit text box focus so user can correct the error
            uicontrol(hObject);
        else
        %    Set the value of the tau
            set(handles.edit_tau,'Value',tau);

        end

	end

%% ---------------------------------------------------------------------------
	function edit_tau_CreateFcn(hObject,evendata) %#ok<INUSD>

        if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
            set(hObject,'BackgroundColor','white');
        end
        %set the default time constant to be 1
        set(hObject,'String','1.0');
        evalin('base','1.0;');
	end

%% ---------------------------------------------------------------------------
	function edit_zeta_Callback(hObject,evendata) %#ok<INUSD>
    
        %get the user entered value for time constant and convert it to a string
        edit_zeta = get(hObject,'String');
        zeta = str2num(edit_zeta);

        if isnan(zeta) || ~isreal(zeta) || zeta < 0 || zeta > 1
            % isdouble returns NaN for non-numbers and zeta cannot be complex
            % Disable the plot button and change its string to say why
            uiwait(msgbox('Damping factor`s value is not valid! Choose value between 0 and 1.','Erro','error'));
            % Give the edit text box focus so user can correct the error
            uicontrol(hObject);
        else       
        %    Set the value of the tau
            set(handles.edit_zeta,'Value',zeta);

        end
	end

%% ---------------------------------------------------------------------------
	function edit_zeta_CreateFcn(hObject,evendata) %#ok<INUSD>

        if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
            set(hObject,'BackgroundColor','white');
        end
        %set the default damping factor to be 1
        set(hObject,'String','1.0');
        evalin('base','1.0;');
	end

%% ---------------------------------------------------------------------------
	function edit_y0_Callback(hObject,evendata) %#ok<INUSD>

        %get the user entered value for dy0 and convert it to a string
        edit_y0 = get(hObject,'String');
        y0 = str2num(edit_y0);

        if isnan(y0) || ~isreal(y0) 
            % isdouble returns NaN for non-numbers and y0 cannot be complex
            % Disable the plot button and change its string to say why
            uiwait(msgbox('Value is not valid!','Erro','error'));
            % Give the edit text box focus so user can correct the error
            uicontrol(hObject);
        else       
        %    Set the value of the tau
            set(handles.edit_y0,'Value',y0);

        end
	end

%% ---------------------------------------------------------------------------
	function edit_y0_CreateFcn(hObject,evendata) %#ok<INUSD>

        if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
            set(hObject,'BackgroundColor','white');
        end
        %set the default y0 to be 0
        set(hObject,'String','0');
        evalin('base','0;');
	end

%% ---------------------------------------------------------------------------
	function edit_dy0_Callback(hObject,evendata) %#ok<INUSD>

        %get the user entered value for dy0 and convert it to a string
        edit_dy0 = get(hObject,'String');
        dy0 = str2num(edit_dy0); %#ok<*ST2NM>

        if isnan(dy0) || ~isreal(dy0) 
            % isdouble returns NaN for non-numbers and dy0 cannot be complex
            % Disable the plot button and change its string to say why
            uiwait(msgbox('Value is not valid!','Erro','error'));
            % Give the edit text box focus so user can correct the error
            uicontrol(hObject);
        else       
        %    Set the value of the tau
            set(handles.edit_dy0,'Value',dy0);
        end
	end

%% ---------------------------------------------------------------------------
	function edit_dy0_CreateFcn(hObject,evendata) %#ok<INUSD>

         if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
            set(hObject,'BackgroundColor','white');
        end
        %set the default dy0 to be 0
        set(hObject,'String','1.0');
        evalin('base','1.0;');
	end

end

%% ----------------------------------------------

%% Transfer function: auxiliar function
function fcn = transffcn(K,tau,zeta,y0,dy0)
    % auxiliar function to obtain FT

    aux1 = 2*zeta*tau;
    aux2 = aux1*y0 + tau^2*dy0;
    s = tf('s');
    fcn = K*(tau^2*y0*s + aux2)/(tau^2*s^2 + aux1*s + 1);  
end
